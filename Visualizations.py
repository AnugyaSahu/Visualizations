# -*- coding: utf-8 -*-
"""DSSS_Ex_4_solution.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gsyuftRf4fkHiTr7PCBN2RfYLKFdo7rc

**Setup** <br>
Uncomment and run the lines below if you have not installed these packages yet:
"""

#!pip install pandas
#!pip install matplotlib
#!pip install seaborn
#!pip install -U pandas-profiling

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from pandas_profiling import ProfileReport

#Download: https://www.kaggle.com/datasets/uciml/pima-indians-diabetes-database

# Load DataFrame
diabetes = pd.read_csv('diabetes.csv')
diabetes.head()

# @title
# # Create report
profile = ProfileReport(diabetes, title="Pandas Profiling Report")
profile.to_notebook_iframe()

"""**Diverging colormaps**: RdBu, BrBG, PuOr, coolwarm, ..."""

# Compute correlation matrix (Pearson correlation)
correlation_matrix = diabetes.corr()
# correlation_matrix

# Plot heatmap
sns.heatmap(correlation_matrix, annot=True, fmt='.1f', cmap='RdBu', vmin=-1, vmax=1)

# load DataFrame
flights = sns.load_dataset('flights')
flights.head()

"""**Visualize #passengers per month and year**"""

# "Pivot" the DataFrame such that we get #passengers for each month & year
flights_2D = flights.pivot(index='month', columns='year', values='passengers')
#flights_2D

# Plot a heatmap
sns.heatmap(flights_2D, annot=True, fmt='d')

# Plot heatmap with a suitable colormap
sns.heatmap(flights_2D, cmap='viridis')

# Rotate labels
plt.xticks(rotation=45)
plt.yticks(rotation=0)

plt.show()

"""**More colormaps:**
* _Sequential colormaps:_ Blues, Greens, Greys, ...
* _Perceptually uniform sequential colormaps:_ viridis, cividis, magma, plasma, inferno

Further information: https://matplotlib.org/stable/tutorials/colors/colormaps.html

<br>

## 1) Lineplot

**Trend of #passengers over the years?**
"""

months = flights['month'].unique()
months

for month in months:
    flights_current_month = flights[flights['month'] == month]
    plt.plot(flights_current_month['year'], flights_current_month['passengers'], label=month)
plt.legend()

"""**Trend of average #passengers over the years?**"""

# Compute mean passengers per year
mean_passengers = flights.groupby('year')['passengers'].mean()
mean_passengers

# Compute standard deviation of passengers per year
std_passengers = flights.groupby('year')['passengers'].std()
std_passengers

# Line plot with errorbars (mean +/- standard deviation)
plt.errorbar(mean_passengers.index, mean_passengers.values, yerr=std_passengers, capsize=5)

# Line plot with error bands (mean +/- standard deviation)
plt.plot(mean_passengers.index, mean_passengers.values)
plt.fill_between(mean_passengers.index, mean_passengers.values - std_passengers, mean_passengers.values + std_passengers,
                 alpha=0.3)
plt.xlabel('year')
plt.ylabel('passengers')

"""**Using seaborn:**"""

# plot line for each month separately
sns.lineplot(flights, x='year', y='passengers', hue='month')

# lineplot with error bars
sns.lineplot(flights, x='year', y='passengers', errorbar='sd', err_style='bars')

# lineplot with error band
sns.lineplot(flights, x='year', y='passengers', errorbar='sd')

"""<br>

## 2) Histogram & boxplot (age distribution)
"""

# Download: https://www.kaggle.com/datasets/parulpandey/2020-it-salary-survey-for-eu-region

# load DataFrame
df = pd.read_csv('IT Salary Survey EU  2020.csv')
df.head()

# Remove NaN's from column 'Age'
df = df[~df['Age'].isnull()]

# Create suitable plot for visualizing the age distribution
sns.histplot(df, x='Age', bins=49)

sns.histplot(df, x='Age', bins=49)

# Compute average age
mean_age = df['Age'].mean()
print(mean_age)

# Highlight average age by plotting a vertical line
plt.axvline(x=mean_age, ls='--', color='orange', label='Mean')
plt.legend()

# Boxplot
# df["Age"].plot.box()

# Seaborn boxplot
sns.boxplot(df, x='Age')

# Plot histogram & boxplot together using plt.subplots()
fig, (ax_boxplot, ax_hist) = plt.subplots(nrows=2,
                                          figsize=(6, 2),
                                          gridspec_kw={"height_ratios": (.2, .8)})

sns.boxplot(df, x='Age', ax=ax_boxplot)
sns.histplot(df, x='Age', bins=49, ax=ax_hist)

# Remove chart borders
sns.despine(ax=ax_boxplot, left=True, bottom=True)
sns.despine(ax=ax_hist, trim=True)

# Remove duplicate axis label and ticks
ax_boxplot.set_xlabel('')
ax_boxplot.set_yticks([])
ax_boxplot.set_xticks([])
plt.show()

# Set seaborn style {darkgrid, whitegrid, dark, white, ticks}
sns.set_style('ticks')

"""<br>

## 3) Box-, violin-, strip-, and swarmplot (salary distribution)
"""

df.columns

# Rename column
df = df.rename(columns={'Yearly brutto salary (without bonus and stocks) in EUR': 'Yearly brutto salary in EUR'})

# Boxplot of salary distribution
sns.boxplot(df, y='Yearly brutto salary in EUR')

"""**Remove outliers (as shown in last week's exercise)**"""

df['Yearly brutto salary in EUR'].describe()

# Q3 + whis*(Q3 - Q1)
upper_limit = 80000 + 1.5*(80000 - 58800)

# Q1 - whis*(Q3 - Q1)
lower_limit = 58800 - 1.5*(80000 - 58800)

# Apply limits to DataFrame
df = df[(df['Yearly brutto salary in EUR'] <= upper_limit) &
        (df['Yearly brutto salary in EUR'] >= lower_limit)]

# Seaborn boxplot
sns.boxplot(df, y='Yearly brutto salary in EUR')

"""**Is there a difference in salary between genders?**"""

# Remove NaN's from column "Gender"
df = df[~df['Gender'].isnull()]

# Plot actual data points with one color for each gender
sns.stripplot(df, y='Yearly brutto salary in EUR', hue='Gender', jitter=True, size=5) # adjust size of points

# Boxplot of salary by gender
sns.boxplot(df, x='Gender', y='Yearly brutto salary in EUR')

# Plot data points
sns.stripplot(df, x='Gender', y='Yearly brutto salary in EUR')

# Adjust colors and sizes
sns.boxplot(df, x='Gender', y='Yearly brutto salary in EUR',
            palette='pastel',
            width=0.5,
            fliersize=2)

sns.stripplot(df, x='Gender', y='Yearly brutto salary in EUR',
              size=3,
              hue='Gender',
              legend=False)

sns.despine()

# Violinplot and swarmplot
sns.violinplot(df, x='Gender', y='Yearly brutto salary in EUR',
                palette='pastel',
                width=0.5)

sns.swarmplot(df, x='Gender', y='Yearly brutto salary in EUR',
              size=2,
              hue='Gender',
              legend=False)

sns.despine()

"""## 4) Bar plot

**How many data scientists are there?**
"""

df = df.rename(columns={'Position ': 'Position'})

position_counts = df['Position'].value_counts()
position_counts

# Bar plot with count per Position
plt.bar(position_counts.index, position_counts.values)

# Only consider top 10 positions
position_counts = position_counts[:10]
position_counts

plt.bar(x=position_counts.index, height=position_counts.values)

# Rotate tick labels
plt.xticks(rotation=45, ha='right')
plt.show()

# Sort bars
position_counts = position_counts.sort_values()

# Horizontal bar plot (because of long labels)
plt.barh(y=position_counts.index, width=position_counts.values)

plt.show()

# Create custom colors with Data Scientists in blue
custom_colors = ['darkgray'] * 10
custom_colors[7] = 'tab:blue'

custom_colors

# Horizontal bar plot with custom colors
bars = plt.barh(y=position_counts.index, width=position_counts.values,
                color=custom_colors)

# Add axis labels
plt.xlabel('Count')
plt.ylabel('Position')

# Add count next to each bar
plt.bar_label(bars, padding=5)

# Remove chart border & y-axis (declutter!)
sns.despine(bottom=False, left=True)
plt.tick_params(left=False)
plt.xlim([0, 400])

plt.show()